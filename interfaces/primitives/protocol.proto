syntax = "proto3";
package primitives;

// NOTE: inline files must be in packages having only inline files

option inline = true;

message protocol_version {
    option inline_type = "uint32";
    uint32 value = 1;
    // size 4 bytes
}

message virtual_chain_id {
    option inline_type = "uint32";
    uint32 value = 1;
    // size 4 bytes
}

message block_height {
    option inline_type = "uint64";
    uint64 value = 1;
    // size 8 bytes
}

// timestamp is Unix timestamp in nanoseconds (number of nanoseconds elapsed since Jan 1, 1970 UTC)
message timestamp_nano {
    option inline_type = "uint64";
    uint64 value = 1;
    // size 8 bytes
}

// timestamp is Unix timestamp in seconds (number of seconds elapsed since Jan 1, 1970 UTC)
message timestamp_seconds {
    option inline_type = "uint32";
    uint32 value = 1;
    // size 4 bytes
}

// equal to a 20 byte ethereum address
// encode in golang: CalcKeccak256(ecdsa_secp256k1_public_key)[12:]
message node_address {
    option inline_type = "bytes";
    bytes value = 1;
    // size 20 bytes
}

message client_address {
    option inline_type = "bytes";
    bytes value = 1;
    // size 20 bytes
}

// contract_name is ascii only, it's not allowed to have 2 contracts with same case insensitive name on a virtual chain
message contract_name {
    option inline_type = "string";
    string value = 1;
    // variable size
}

// method_name is ascii only, it's not allowed to have 2 methods with same case insensitive name on a contract
message method_name {
    option inline_type = "string";
    string value = 1;
    // variable size
}

message event_name {
    option inline_type = "string";
    string value = 1;
    // variable size
}

message execution_context_id {
    option inline_type = "bytes";
    uint32 value = 1;
    // size undecided
}

message lean_helix_message_content {
    option inline_type = "bytes";
    bytes value = 1;
    // variable size
}

message merkle_tree_proof {
    option inline_type = "bytes";
    bytes value = 1;
    // variable size
}

message lean_helix_block_proof {
    option inline_type = "bytes";
    bytes value = 1;
    // variable size
}

// opaque field of protocol.ReceiptProof
// encode in golang: packed := protocol.ReceiptProof.Raw()
message packed_receipt_proof {
    option inline_type = "bytes";
    bytes value = 1;
    // variable size
}

// opaque field of repeated protocol.Event
// encode in golang: packed := protocol.EventsArray.RawEventsArray()
// decode in golang: protocol.EventsArrayReader(parent.RawOutputEventsArrayWithHeader())
message packed_events_array {
    option inline_type = "bytes";
    bytes value = 1;
    // variable size
}

// opaque field of repeated protocol.Argument
// encode in golang: packed := protocol.ArgumentArray.RawArgumentsArray()
// decode in golang: protocol.ArgumentArrayReader(parent.RawOutputArgumentArrayWithHeader())
message packed_argument_array {
    option inline_type = "bytes";
    bytes value = 1;
    // variable size
}

// weight (stake) used in committee
message weight {
    option inline_type = "uint64";
    uint64 value = 1;
    // size 8 bytes
}

message storage_keys {
    option inline_type = "uint64";
    uint64 value = 1;
    // size 8 bytes
}

message storage_size_megabyte {
    option inline_type = "uint64";
    uint64 value = 1;
    // size 8 bytes
}

syntax = "proto3";
package services;
option go_package = "github.com/orbs-network/orbs-spec/types/go/services";

import "primitives/crypto.proto";
import "primitives/protocol.proto";
import "protocol/contracts.proto";
import "protocol/results.proto";
import "protocol/blocks.proto";

option serialize_messages = false;

service StateStorage {
    // called by BlockStorage
    rpc CommitStateDiff (CommitStateDiffInput) returns (CommitStateDiffOutput);

    // called by VirtualMachine
    rpc ReadKeys (ReadKeysInput) returns (ReadKeysOutput);
    rpc GetLastCommittedBlockInfo (GetLastCommittedBlockInfoInput) returns (GetLastCommittedBlockInfoOutput);

    // called by ConsensusContext
    rpc GetStateHash (GetStateHashInput) returns (GetStateHashOutput);
}

message ReadKeysInput {
    primitives.block_height block_height = 1;
    primitives.contract_name contract_name = 2;
    repeated bytes keys = 3;
}

// returns error code on failure
message ReadKeysOutput {
    repeated protocol.StateRecord state_records = 1; // A state_record with a 0 size array (key not found) implies the varible type default value.
}

message GetLastCommittedBlockInfoInput {
}

message GetLastCommittedBlockInfoOutput {
    primitives.block_height block_height = 1;
    primitives.timestamp_nano block_timestamp = 2;
    primitives.node_address block_proposer_address = 3;
    primitives.timestamp_seconds current_reference_time = 4;
    primitives.timestamp_seconds prev_reference_time = 5;
    primitives.storage_keys current_num_keys = 6;
    primitives.storage_size_megabyte current_size = 7;
}

message CommitStateDiffInput {
    protocol.ResultsBlockHeader results_block_header = 1;
    repeated protocol.ContractStateDiff contract_state_diffs = 2;
}

message CommitStateDiffOutput {
    primitives.block_height next_desired_block_height = 1;
    // primitives.block_height last_committed_block_height = 2;
}

message GetStateHashInput {
    primitives.block_height block_height = 1;
}

// returns error code on failure
message GetStateHashOutput {
    primitives.sha256 state_merkle_root_hash = 1;
}
